#include <iostream>
#include <fstream>
#include <boost/asio.hpp>

using boost::asio::ip::tcp;
constexpr int PORT = 12345;
const std::string SERVER_IP = "127.0.0.1";  // Alterar para o IP real do servidor

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Uso: client_upload <arquivo_para_upload>\n";
        return 1;
    }

    std::string filename = argv[1];
    std::ifstream infile(filename, std::ios::binary);
    if (!infile) {
        std::cerr << "Erro ao abrir o arquivo: " << filename << std::endl;
        return 1;
    }

    try {
        boost::asio::io_service io_service;
        tcp::socket socket(io_service);
        tcp::resolver resolver(io_service);
        boost::asio::connect(socket, resolver.resolve({SERVER_IP, std::to_string(PORT)}));

        std::cout << "Conectado ao servidor. Enviando arquivo...\n";

        // Enviando o nome do arquivo
        char filename_cstr[256] = {0};
        std::strncpy(filename_cstr, filename.c_str(), sizeof(filename_cstr) - 1);
        boost::asio::write(socket, boost::asio::buffer(filename_cstr, sizeof(filename_cstr)));

        // Enviando o arquivo
        char data[1024];
        while (infile.read(data, sizeof(data))) {
            boost::asio::write(socket, boost::asio::buffer(data, infile.gcount()));
        }

        // Finaliza o envio com os bytes restantes
        if (infile.gcount() > 0) {
            boost::asio::write(socket, boost::asio::buffer(data, infile.gcount()));
        }

        infile.close();
        std::cout << "Arquivo enviado com sucesso.\n";
    } catch (std::exception& e) {
        std::cerr << "Erro: " << e.what() << std::endl;
    }

    return 0;
}
