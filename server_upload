#include <iostream>
#include <fstream>
#include <boost/asio.hpp>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_generators.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <iphlpapi.h>
#include <sstream>
#include <iomanip>

#pragma comment(lib, "iphlpapi.lib")

using boost::asio::ip::tcp;
constexpr int PORT = 12345;

// Função para obter o MAC address da interface conectada à internet
std::string getMACAddressFromConnectedInterface() {
    IP_ADAPTER_INFO AdapterInfo[16];
    DWORD dwBufLen = sizeof(AdapterInfo);
    DWORD dwStatus = GetAdaptersInfo(AdapterInfo, &dwBufLen);

    if (dwStatus != ERROR_SUCCESS) {
        std::cerr << "Erro ao obter o endereço MAC" << std::endl;
        exit(1);
    }

    PIP_ADAPTER_INFO pAdapterInfo = AdapterInfo;
    while (pAdapterInfo) {
        if (pAdapterInfo->IpAddressList.IpAddress.String[0] != '0') {
            std::ostringstream macStream;
            for (int i = 0; i < pAdapterInfo->AddressLength; ++i) {
                if (i != 0) macStream << "-";
                macStream << std::hex << std::setw(2) << std::setfill('0') << (int)pAdapterInfo->Address[i];
            }
            return macStream.str();
        }
        pAdapterInfo = pAdapterInfo->Next;
    }

    std::cerr << "Nenhuma interface conectada à internet foi encontrada." << std::endl;
    return "";
}

// Função para gerar UUID baseado no MAC address
std::string generateUUIDFromMAC() {
    std::string macAddress = getMACAddressFromConnectedInterface();
    if (!macAddress.empty()) {
        boost::uuids::name_generator gen(boost::uuids::string_generator()(macAddress));
        boost::uuids::uuid uuid = gen(macAddress);
        return to_string(uuid);
    }
    return "";
}

int main() {
    try {
        boost::asio::io_service io_service;
        tcp::acceptor acceptor(io_service, tcp::endpoint(tcp::v4(), PORT));

        std::cout << "Aguardando conexão na porta " << PORT << "...\n";
        
        // Geração do UUID baseado no MAC address do servidor
        std::string serverUUID = generateUUIDFromMAC();
        if (!serverUUID.empty()) {
            std::cout << "UUID do servidor: " << serverUUID << std::endl;
        } else {
            std::cerr << "Falha ao gerar o UUID do servidor!" << std::endl;
            return 1;
        }

        for (;;) {
            tcp::socket socket(io_service);
            acceptor.accept(socket);
            std::cout << "Cliente conectado." << std::endl;

            // Recebendo o nome do arquivo
            char filename[256];
            boost::asio::read(socket, boost::asio::buffer(filename, sizeof(filename)));
            std::cout << "Recebendo arquivo: " << filename << std::endl;

            // Recebendo o arquivo
            std::ofstream outfile(filename, std::ios::binary);
            if (!outfile) {
                std::cerr << "Erro ao abrir o arquivo para escrita!" << std::endl;
                return 1;
            }

            char data[1024];
            boost::system::error_code error;
            while (size_t len = socket.read_some(boost::asio::buffer(data), error)) {
                outfile.write(data, len);
                if (error == boost::asio::error::eof) {
                    break;
                } else if (error) {
                    throw boost::system::system_error(error);
                }
            }

            outfile.close();
            std::cout << "Arquivo recebido com sucesso." << std::endl;
        }
    } catch (std::exception& e) {
        std::cerr << "Erro: " << e.what() << std::endl;
    }

    return 0;
}
